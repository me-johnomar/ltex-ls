plugins {
  id 'java'
  id 'application'
  id 'jacoco'
  id 'com.github.kt3k.coveralls' version '2.10.1'
}

allprojects {
  group('valentjn')
  version('5.0.0-beta.3')
}

repositories {
  jcenter()
}

subprojects {
  apply(plugin: 'java')
}

project(':ltex-ls-languagetool-patch') {
  repositories {
    jcenter()
  }

  dependencies {
    compile(group: 'org.languagetool', name: 'languagetool-core', version: '4.9')
  }

  sourceSets {
    main {
      java.srcDirs = ['src/main/java']
      java.include('org/languagetool/**')
    }
  }
}

dependencies {
  compile(project(':ltex-ls-languagetool-patch'))

  testCompile(group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.6.1')
  testRuntime(group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.6.1')

  // LanguageTool
  compile(group: 'org.languagetool', name: 'languagetool-core', version: '4.9')
  compile(group: 'org.languagetool', name: 'language-all', version: '4.9')

  // prevent "Failed to load class org.slf4j.impl.StaticLoggerBinder",
  // see http://www.slf4j.org/codes.html#StaticLoggerBinder
  // (slf4j-api 1.7.25 is a dependency of LanguageTool)
  compile(group: 'org.slf4j', name: 'slf4j-nop', version: '1.7.25')

  // Language Server Protocol implementation
  compile(group: 'org.eclipse.lsp4j', name: 'org.eclipse.lsp4j', version: '0.9.0')

  // Markdown parser
  compile(group: 'com.vladsch.flexmark', name: 'flexmark', version: '0.60.2')

  // HTTP client (can be replaced with java.net.http after upgrading to Java 11)
  compile(group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.12')

  // unit tests
  testCompile(group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.6.1')
  testCompile(group: 'org.languagetool', name: 'languagetool-server', version: '4.9')
}

test {
  useJUnitPlatform()

  testLogging {
    events("passed", "skipped", "failed")
    exceptionFormat("full")
    showExceptions(true)
    showCauses(true)
    showStackTraces(true)
  }
}

// coveralls plugin depends on XML output
jacocoTestReport {
  reports {
    xml.enabled = true
    html.enabled = true
  }
}

sourceSets {
  main {
    java.srcDirs = ['src/main/java']
    resources.srcDirs = ['src/main/resources']
  }

  test {
    java.srcDirs = ['src/test/java']
  }
}

// Define the main class for the application
mainClassName = 'LtexLanguageServerLauncher'

// set JAR manifest attributes
jar {
  manifest {
    attributes(
      'Main-Class': mainClassName,
      'Implementation-Version': version,
    )
  }
}

// replace CLASSPATH variable in bin/ scripts to use a wildcard instead of listing all JARs
// as the resulting command line is too long for Windows (and it's more legible)
startScripts {
  doLast {
    unixScript.text = unixScript.readLines().collect({line ->
      line = line.replaceAll(~/^CLASSPATH=.*$/) { match ->
        match = 'CLASSPATH=$APP_HOME/lib/ltex-ls-languagetool-patch-' + version +
            '.jar:$APP_HOME/lib/*'
      }
    }).join('\n')
    windowsScript.text = windowsScript.readLines().collect({line ->
      line = line.replaceAll(~/^set CLASSPATH=.*$/) { match ->
        match = 'set CLASSPATH=%APP_HOME%\\lib\\ltex-ls-languagetool-patch-' + version +
            '.jar;%APP_HOME%\\lib\\*'
      }
    }).join('\r\n')
  }
}

// use .tar.gz instead of .tar
tasks.withType(Tar) {
  compression = Compression.GZIP
  extension = 'tar.gz'
}
